from django.contrib.auth.decorators import login_requiredfrom django.shortcuts import render, get_object_or_404, redirectfrom django.urls import reverse_lazyfrom django.views.generic import CreateView, UpdateView, DeleteViewfrom .models import Room, Topic, Messagefrom .forms import RoomFormfrom django.db.models import Qfrom django.contrib.auth.mixins import LoginRequiredMixinfrom .utils import IsOwnerCheckMixin@login_requireddef index(request):    query = request.GET.get('q', '')    rooms = Room.objects.filter(        Q(topic__name__icontains=query) |        Q(name__icontains=query) |        Q(description__icontains=query)    )    topics = Topic.objects.all()    context = {        "topics": topics,        "rooms": rooms,    }    return render(request, "communication/index.html", context)# Todo: rewrite room to use slug.def room_detail(request, pk):    room = get_object_or_404(Room, pk=pk)    if request.method == "POST":        message_content = request.POST.get("message_content", None)        try:            Message.objects.create(                user=request.user,                room=room,                content=message_content            )            room.participants.add(request.user)            return redirect("room", pk=room.id)        except Exception as err:            print(err)    context = {"room": room}    return render(request, "communication/room.html", context)class UpdateRoomView(IsOwnerCheckMixin, UpdateView):    model = Room    form_class = RoomForm    template_name = "communication/create_update_room.html"    success_url = reverse_lazy("index")class CreateRoomView(LoginRequiredMixin, CreateView):    model = Room    form_class = RoomForm    template_name = "communication/create_update_room.html"    def form_valid(self, form):        form.instance.user = self.request.user        return super().form_valid(form)class DeleteRoomView(IsOwnerCheckMixin, DeleteView):    model = Room    template_name = "communication/delete.html"    success_url = reverse_lazy("index")    context_object_name = "obj"class DeleteMessageView(IsOwnerCheckMixin, DeleteView):    model = Message    template_name = "communication/delete.html"    context_object_name = "obj"    def get_success_url(self):        return self.object.room.get_absolute_url()